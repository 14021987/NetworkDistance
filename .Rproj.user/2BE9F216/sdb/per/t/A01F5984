{
    "collab_server" : "",
    "contents" : "#' Edge Difference Distance\n#'\n#' It is of the most simplest form that Edge Difference Distance (EDD)\n#' takestwo adjacency matrices and takes Frobenius norm of their differnces.\n#'\n#'\n#' @param A a list of length \\eqn{N} containing \\eqn{(M\\times M)} adjacency matrices.\n#' @param out.dist a logical; \\code{TRUE} for computed distance matrix as a \\code{dist} object.\n#'\n#' @return a named list containing \\describe{\n#' \\item{D}{an \\eqn{(N\\times N)} matrix or \\code{dist} object containing pairwise distance measures.}\n#' }\n#'\n#' @examples\n#' ## generate two types of adjacency matrices of size (3-by-3)\n#' rbin1 = rbinom(9,1,0.8); mat1 = matrix(rbin1,nrow=3)\n#' rbin2 = rbinom(9,1,0.1); mat2 = matrix(rbin2,nrow=3)\n#'\n#' mattype1 = ceiling((mat1+t(mat1))/2); diag(mattype1)=0;\n#' mattype2 = ceiling((mat2+t(mat2))/2); diag(mattype2)=0;\n#'\n#' A = list()\n#' for (i in 1:3){A[[i]]=mattype1} # first 3 are type-1\n#' for (i in 4:6){A[[i]]=mattype2} # next  3 are type-2\n#'\n#' ## Compute Distance Matrix and Visualize\n#' output = nd.edd(A, out.dist=FALSE)\n#' image(output$D, main=\"two group case\")\n#'\n#' @references\n#' \\insertRef{hammond_graph_2013}{NetworkDistance}\n#'\n#' @rdname nd_edd\n#' @export\nnd.edd <- function(A, out.dist=TRUE){\n  #-------------------------------------------------------\n  ## PREPROCESSING\n  # 1. list of length larger than 1\n  if ((!is.list(A))||(length(A)<=1)){\n    stop(\"* nd.gdd : input 'A' should be a list of length larger than 1.\")\n  }\n  # 2. transform the data while checking\n  listA = list_transform(A, NIflag=\"not\")\n\n  #-------------------------------------------------------\n  ## MAIN COMPUTATION\n  N = length(listA)\n  M = nrow(listA[[1]])\n  mat_dist = array(0,c(N,N))\n\n  for (i in 1:(N-1)){\n    X1 = matrix(listA[[i]], nrow=M)\n    for (j in (i+1):N){\n      X2 = matrix(listA[[j]], nrow=M)\n      solution = aux_FrobeniusDiff(X1, X2)\n\n      mat_dist[i,j] = solution\n      mat_dist[j,i] = solution\n    }\n  }\n\n  #-------------------------------------------------------\n  ## RETURN RESULTS\n  if (out.dist){\n    mat_dist = as.dist(mat_dist)\n  }\n\n  result = list()\n  result$D= mat_dist\n  return(result)\n\n}\n",
    "created" : 1512668183360.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "78330236",
    "id" : "A01F5984",
    "lastKnownWriteTime" : 1512668289,
    "last_content_update" : 1512668289847,
    "path" : "~/Desktop/NetworkDistance/R/nd_edd.R",
    "project_path" : "R/nd_edd.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}